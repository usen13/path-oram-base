#include "sql_handler.h"
#include <iostream>
#include <stdexcept>
#include <algorithm>
#include <filesystem>

std::vector<std::pair<int64_t, int64_t>> SQLHandler::shamirSecretSharing(int64_t& secret, int n, int k) {
    std::vector<int64_t> coefficients(k - 1);
    std::vector<std::pair<int64_t, int64_t>> shares;

    // Fixed random number generator using the secret, the number of shares n and the minimum share needed for reconstruction k
    std::mt19937 gen(static_cast<uint32_t>(secret) ^ n ^ k);
    std::uniform_int_distribution<> dis(1, 100);

    coefficients[0] = secret;
    for (int i = 1; i < k; ++i) {
        coefficients[i] = dis(gen); // So in the case, for k = 3 we have 2 coefficients, at 0 index we have the secret, at 1 index we have the first coefficient
    }

    // Generate shares
    for (int64_t x = 1; x <= n; ++x) {
        int64_t y = 0;
        for (int i = 0; i < k; ++i) {
            y += coefficients[i] * std::pow(x, i); // For the first share, we have x = 1, so we have y = coefficients[0] + coefficients[1] + coefficients[2]
                                                   // where coefficients[0] is the secret, coefficients[1] is the random integer generated by std::uniform_int_distribution<> dis(1, INT32_MAX)
        }
        shares.emplace_back(x, y);
    }
        // Print out the shares
    // for (const auto& share : shares) {
    //     std::cout << "Share: (" << share.first << ", " << share.second << ")" << std::endl;
    // }
    return shares;
}

// Function to convert string to integer (simple example using ASCII values)
int64_t SQLHandler::stringToInt(const std::string& str) {
    int64_t result = 0;
    for (char c : str) {
        result = result * 256 + static_cast<int>(c);
    }
    return result;
}

SQLHandler::SQLHandler() = default;
SQLHandler::~SQLHandler() = default;

void SQLHandler::setSelectItems(const std::vector<Utils::SelectItem>& items) { selectItems = items; }
void SQLHandler::setFilterItems(const std::vector<Utils::FilterItem>& items) { filterItems = items; }
void SQLHandler::setAttributeSecrets(const std::string& secrets) { attributeSecrets.emplace_back(secrets); }
void SQLHandler::setConditionSecrets(const int64_t& secrets) { conditionSecrets.emplace_back(secrets); }
void SQLHandler::setWhereClauses(const std::string& clauses) { whereClauses = clauses; }

AtrributeID SQLHandler::attributeStringToEnum(const std::string& attr) {
    static const std::unordered_map<std::string, AtrributeID> attrMap = {
        {"ORDERKEY", orderKeyID},
        {"PARTKEY", partKeyID},
        {"SUPPKEY", suppKeyID},
        {"LINENUMBER", lineNumberID},
        {"QUANTITY", quantityID},
        {"EXTENDEDPRICE", extendedPriceID},
        {"DISCOUNT", discountID},
        {"TAX", taxID},
        {"RETURNFLAG", returnFlagID},
        {"LINESTATUS", lineStatusID},
        {"SHIPDATE", shipDateID},
        {"COMMITDATE", commitDateID},
        {"RECEIPTDATE", receiptDateID},
        {"SHIPINSTRUCT", shipInStructID},
        {"SHIPMODE", shipModeID},
        {"COMMENT", commentID},
        {"ALL", allID}
    };
    auto it = attrMap.find(attr);
    if (it != attrMap.end()) {
        return it->second;
    }
    throw std::invalid_argument("Unknown attribute: " + attr);
}