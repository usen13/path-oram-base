#include "shamir_parser.h"

std::vector<LineItem> ShamirParser::parseLineItemFile(const std::string& filename) {
    std::vector<LineItem> lineItems;
    std::ifstream file(filename);
    std::string line;

    while (std::getline(file, line)) {
        std::istringstream iss(line);
        std::string token;
        LineItem item;

        std::getline(iss, token, '|'); item.L_ORDERKEY = std::stoi(token);
        std::getline(iss, token, '|'); item.L_PARTKEY = std::stoi(token);
        std::getline(iss, token, '|'); item.L_SUPPKEY = std::stoi(token);
        std::getline(iss, token, '|'); item.L_LINENUMBER = std::stoi(token);
        std::getline(iss, token, '|'); item.L_QUANTITY = std::stoi(token);
        std::getline(iss, token, '|'); item.L_EXTENDEDPRICE = std::stod(token);
        std::getline(iss, token, '|'); item.L_DISCOUNT = std::stod(token);
        std::getline(iss, token, '|'); item.L_TAX = std::stod(token);
        std::getline(iss, token, '|'); item.L_RETURNFLAG = token;
        std::getline(iss, token, '|'); item.L_LINESTATUS = token;
        std::getline(iss, token, '|'); item.L_SHIPDATE = token;
        std::getline(iss, token, '|'); item.L_COMMITDATE = token;
        std::getline(iss, token, '|'); item.L_RECEIPTDATE = token;
        std::getline(iss, token, '|'); item.L_SHIPINSTRUCT = token;
        std::getline(iss, token, '|'); item.L_SHIPMODE = token;
        std::getline(iss, token, '|'); item.L_COMMENT = token;

        lineItems.push_back(item);
    }

    return lineItems;
}

template <typename T>
std::unordered_map<T, int> ShamirParser::mapUniqueValues(const std::vector<T>& values) {
    std::unordered_map<T, int> value_map;
    int counter = 1;

    for (const auto& value : values) {
        if (value_map.find(value) == value_map.end()) {
            value_map[value] = counter++;
        }
    }

    return value_map;
}

std::vector<std::pair<int64_t, int64_t>> ShamirParser::shamirSecretSharingDouble(double& secret, int n, int k) {
    std::vector<int64_t> coefficients(k);
    std::vector<std::pair<int64_t, int64_t>> shares;

    // Generate random coefficients
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int64_t> dis(0, 100);

    coefficients[0] = static_cast<int64_t>(secret * 100); // Scale the floating point value
    for (int i = 1; i < k; ++i) {
        coefficients[i] = dis(gen);
    }

    // Generate shares
    for (int64_t x = 1; x <= n; ++x) {
        int64_t y = 0;
        for (int i = 0; i < k; ++i) {
            y += coefficients[i] * std::pow(x, i);;
        }
        shares.emplace_back(x,y);
    }

    return shares;
}

std::vector<std::pair<int64_t, int64_t>> ShamirParser::shamirSecretSharing(int64_t& secret, int n, int k) {
    std::vector<int64_t> coefficients(k - 1);
    std::vector<std::pair<int64_t, int64_t>> shares;

    // Generate random coefficients
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(1, 100);

    coefficients[0] = secret;
    for (int i = 1; i < k; ++i) {
        coefficients[i] = dis(gen); // So in the case, for k = 3 we have 2 coefficients, at 0 index we have the secret, at 1 index we have the first coefficient
    }

    // Generate shares
    for (int64_t x = 1; x <= n; ++x) {
        int64_t y = 0;
        for (int i = 0; i < k; ++i) {
            y += coefficients[i] * std::pow(x, i); // For the first share, we have x = 1, so we have y = coefficients[0] + coefficients[1] + coefficients[2]
                                                   // where coefficients[0] is the secret, coefficients[1] is the random integer generated by std::uniform_int_distribution<> dis(1, INT32_MAX)
        }
        shares.emplace_back(x, y);
    }

    return shares;
}

double ShamirParser::reconstructSecretFloat(const std::vector<std::pair<int64_t, int64_t>>& shares, int k) {
    double secret = 0;

    for (int i = 0; i < k; ++i) {
        double lagrange_coeff = 1.0;

        for (int j = 0; j < k; ++j) {
            if (i != j) {
                lagrange_coeff *= static_cast<double>(-shares[j].first) / (shares[i].first - shares[j].first);
            }
        }

        secret = secret + shares[i].second * lagrange_coeff;
    }

    return static_cast<double>((secret ) / 100.0); // Scale back to floating point
}

// Reconstruction (using Lagrange interpolation)
int64_t ShamirParser::reconstructSecret(const std::vector<std::pair<int64_t, int64_t>>& shares, int k) {
    double secret = 0;
    // Size of double is 64 bits, so it can store 15 decimal digits
    // Size of int64_t is 64 bits, so it can store 18 decimal digits

    for (int i = 0; i < k; ++i) {
        double lagrange_coeff = 1.0;

        for (int j = 0; j < k; ++j) {
            if (i != j) {
                lagrange_coeff *= static_cast<double>(-shares[j].first) / (shares[i].first - shares[j].first);
            }
        }

        secret += shares[i].second * lagrange_coeff;
    }

    return static_cast<int64_t>(std::round(secret));
}

// Function to convert date string to Unix timestamp
int64_t ShamirParser::dateToTimestamp(const std::string& date) {
    std::tm tm = {};
    std::istringstream ss(date);
    ss >> std::get_time(&tm, "%Y-%m-%d");
    return std::mktime(&tm);
}

// Convert Unix timestamp to date string
std::string ShamirParser::timestampToDate(int64_t timestamp) {
    std::time_t time = timestamp;
    std::tm* tm = std::localtime(&time);
    std::ostringstream ss;
    ss << std::put_time(tm, "%Y-%m-%d");
    return ss.str();
}

// Function to convert string to integer (simple example using ASCII values)
int64_t ShamirParser::stringToInt(const std::string& str) {
    int64_t result = 0;
    for (char c : str) {
        result = result * 256 + static_cast<int>(c);
    }
    return result;
}

// Convert integer to string
std::string ShamirParser::intToString(int64_t value) {
    std::string result;
    while (value > 0) {
        result = static_cast<char>(value % 256) + result;
        value /= 256;
    }
    return result;
}

std::vector<std::vector<std::pair<int64_t, int64_t>>> ShamirParser::shamirSecretSharingAllAttributes(const LineItem& item, int n, int k) {
    std::vector<std::vector<std::pair<int64_t, int64_t>>> allShares(16);
    // Max value of int64_t is 2^63 - 1 = 9223372036854775807

    auto shareAttributeInt = [&](int64_t secret) {
        return shamirSecretSharing(secret, n, k);
    };

    auto shareAttributeDouble = [&](double secret) {
        return shamirSecretSharingDouble(secret, n, k);
    };

    allShares[0] = shareAttributeInt(item.L_ORDERKEY);
    allShares[1] = shareAttributeInt(item.L_PARTKEY);
    allShares[2] = shareAttributeInt(item.L_SUPPKEY);
    allShares[3] = shareAttributeInt(item.L_LINENUMBER);
    allShares[4] = shareAttributeInt(item.L_QUANTITY);
    allShares[5] = shareAttributeInt(item.L_EXTENDEDPRICE);
    allShares[6] = shareAttributeDouble(item.L_DISCOUNT);
    allShares[7] = shareAttributeDouble(item.L_TAX);
    allShares[8] = shareAttributeInt(item.L_RETURNFLAG[0]);
    allShares[9] = shareAttributeInt(item.L_LINESTATUS[0]);
    allShares[10] = shareAttributeInt(dateToTimestamp(item.L_SHIPDATE));
    allShares[11] = shareAttributeInt(dateToTimestamp(item.L_COMMITDATE));
    allShares[12] = shareAttributeInt(dateToTimestamp(item.L_RECEIPTDATE));
    allShares[13] = shareAttributeInt(stringToInt(item.L_SHIPINSTRUCT));
     allShares[14] = shareAttributeInt(stringToInt(item.L_SHIPMODE));
     allShares[15] = shareAttributeInt(stringToInt(item.L_COMMENT));

    return allShares;
}

// Function to save shares to files
void ShamirParser::saveAllShares(const std::vector<std::vector<std::pair<int64_t, int64_t>>>& allShares, int tupleId) {
    for (size_t i = 0; i < allShares[0].size(); ++i) { // Parse for each share
        std::ofstream file("server_" + std::to_string(i + 1) + ".txt", std::ios::app);
        if (file.is_open()) {
            //file << "Tuple " << tupleId << ": ";
            for (const auto& shares : allShares) {
                file << "|" << " "<< shares[i].second << " ";
            }
            file << "\n";
            file.close();
        }
    }
}

std::vector<std::vector<std::vector<int64_t>>> ShamirParser::loadAllShares(int n) {
    std::vector<std::vector<std::vector<int64_t>>> allShares(n);
// The format of allShares is as follows:
// Inner most vector contains the shares for a single tuple, in total 16 shares
// Middle vector contains all the tuples for a single server, in total n tuples 
// Outer most vector must contain shares of total n servers, in our case n = 6

    for (int serverIndex = 1; serverIndex <= n; ++serverIndex) {
        std::ifstream file("server_" + std::to_string(serverIndex) + ".txt", std::ios::in);
        if (file.is_open()) {
            std::string line;
            while (std::getline(file, line)) {
                std::istringstream iss(line);
                std::string y_str;
                std::vector<int64_t> tupleShares;
                while (std::getline(iss, y_str, '|')) {
                    // Trim leading and trailing whitespace
                    y_str.erase(0, y_str.find_first_not_of(" \t\n\r"));
                    y_str.erase(y_str.find_last_not_of(" \t\n\r") + 1);

                    if (!y_str.empty()) {
                        tupleShares.push_back(std::stoll(y_str));
                    }
                }
                allShares[serverIndex -1].push_back({tupleShares});
            }
            file.close();
        } else {
            std::cerr << "Error opening file: server_" << serverIndex << ".txt" << std::endl;
        }
    }

    return allShares;
}

std::vector<std::vector<std::pair<int64_t, int64_t>>> ShamirParser::transformShares(const std::vector<std::vector<std::vector<int64_t>>>& allShares) {
    std::vector<std::vector<std::pair<int64_t, int64_t>>> transformedShares;

    if (allShares.empty()) {
        std::cerr << "Error: No shares to transform." << std::endl;
        return transformedShares;
    }

    size_t numServers = allShares.size(); // The size of allShares.size is 6, which is the number of servers
    size_t numTuples = allShares[0].size(); // The size of allShares[0].size() is n, which is the number of tuples
    size_t numAttributes = allShares[0][0].size(); // Number of attributes, should be 16

    transformedShares.resize(numAttributes);

    for (size_t tupleIndex = 0; tupleIndex < numTuples; ++tupleIndex) { // [0][a][0]
        for (size_t attributeIndex = 0; attributeIndex < numAttributes; ++attributeIndex) { // [0][0][a]
            for (size_t serverIndex = 0; serverIndex < numServers; ++serverIndex) { // [a][0][0]
                if (serverIndex < allShares.size() && tupleIndex < allShares[serverIndex].size() && attributeIndex < allShares[serverIndex][tupleIndex].size()) {
                    transformedShares[attributeIndex].emplace_back(serverIndex + 1, allShares[serverIndex][tupleIndex][attributeIndex]);
                }
            }
        }
    }

    return transformedShares;
}

int main(int argc, char** argv) {
    if (argc != 3) {
        std::cout << "Usage: " << argv[0] << " <encrypt/decrypt> <file>" << std::endl;
        return 1;
    }

    std::string option = argv[1];
    std::string filename = argv[2];
    ShamirParser parser;

    if (option == "encrypt") {
        auto lineItems = parser.parseLineItemFile(filename);

        for (size_t i = 0; i < lineItems.size(); ++i) {
            auto allShares = parser.shamirSecretSharingAllAttributes(lineItems[i], 6, 3);
            parser.saveAllShares(allShares, i+1);
        }
    } else if (option == "decrypt") {
        std::vector<LineItem> reconstructedItems;

        //for (size_t tupleIndex = 1; ; ++tupleIndex) {
            auto tempShares = parser.loadAllShares(6);
            auto allShares = parser.transformShares(tempShares);

            LineItem item;
            item.L_ORDERKEY = parser.reconstructSecret(allShares[0], 3);
            item.L_PARTKEY = parser.reconstructSecret(allShares[1], 3);
            item.L_SUPPKEY = parser.reconstructSecret(allShares[2], 3);
            item.L_LINENUMBER = parser.reconstructSecret(allShares[3], 3);
            item.L_QUANTITY = parser.reconstructSecret(allShares[4], 3);
            item.L_EXTENDEDPRICE = parser.reconstructSecret(allShares[5], 3);
            item.L_DISCOUNT = parser.reconstructSecretFloat(allShares[6], 3);
            item.L_TAX = parser.reconstructSecretFloat(allShares[7], 3);
            item.L_RETURNFLAG = static_cast<char>(parser.reconstructSecret(allShares[8], 3));
            item.L_LINESTATUS = static_cast<char>(parser.reconstructSecret(allShares[9], 3));
            item.L_SHIPDATE = parser.timestampToDate(parser.reconstructSecret(allShares[10], 3));
            item.L_COMMITDATE = parser.timestampToDate(parser.reconstructSecret(allShares[11], 3));
            item.L_RECEIPTDATE = parser.timestampToDate(parser.reconstructSecret(allShares[12], 3));
            item.L_SHIPINSTRUCT = parser.intToString(parser.reconstructSecret(allShares[13], 3));
            item.L_SHIPMODE = parser.intToString(parser.reconstructSecret(allShares[14], 3));
            item.L_COMMENT = parser.intToString(parser.reconstructSecret(allShares[15], 3));

            reconstructedItems.push_back(item);


        std::ofstream outputFile(filename);
        if (outputFile.is_open()) {
            for (const auto& item : reconstructedItems) {
                outputFile << item.L_ORDERKEY << "|" << item.L_PARTKEY << "|" << item.L_SUPPKEY << "|" << item.L_LINENUMBER << "|"
                           << item.L_QUANTITY << "|" << item.L_EXTENDEDPRICE << "|" << item.L_DISCOUNT << "|" << item.L_TAX << "|"
                           << item.L_RETURNFLAG << "|" << item.L_LINESTATUS << "|" << item.L_SHIPDATE << "|" << item.L_COMMITDATE << "|"
                           << item.L_RECEIPTDATE << "|" << item.L_SHIPINSTRUCT << "|" << item.L_SHIPMODE << "|" << item.L_COMMENT << "\n";
            }
            outputFile.close();
        } else {
            std::cerr << "Error opening output file: " << filename << std::endl;
            return 1;
        }
        std::cout << "Reconstructed tuples written to: " << filename << std::endl;
    } else {
        std::cout << "Invalid option." << std::endl;
        return 1;
    }

    return 0;
}